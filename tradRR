#include <stdio.h>

int main() {
    int i = 0;
    int j = 0;
    int numProcesses = 0;
    int timeSlice = 0;
    int maxBurstTime = 0;
    int temp = 0;

    int burstTime[10];
    int backupBurstTime[10];
    int waitTime[10];
    int turnAroundTime[10];
    int responseTime[10];

    float avgWaitTime = 0.0;
    float avgTurnAroundTime = 0.0;
    float avgResponseTime = 0.0;

    printf("\t CPU Scheduling Method: Round Robin \n");
    printf("\n\t Enter the no of processes: ");
    scanf("%d", &numProcesses);

    for (i = 0; i < numProcesses; i++) {
        printf("\n\t Enter Burst Time for process %d: ", i+1);
        scanf ("%d", &burstTime[i]);
        backupBurstTime[i] = burstTime[i];
    }

    printf("\n\t Enter the size of time slice: ");
    scanf("%d", &timeSlice);
    maxBurstTime = burstTime[0];
    for (i = 0; i < numProcesses; i++) {
        if (maxBurstTime < burstTime[i]) {
            maxBurstTime = burstTime[i];
        }
    }
    for (j = 0; j < (maxBurstTime / timeSlice) + 1; j++) {
        for (i = 0; i < numProcesses; i++) {
            if (burstTime[i] != 0) {
                if (burstTime[i] <= timeSlice) {
                    turnAroundTime[i] = temp + burstTime[i];
                    temp = temp + burstTime[i];
                    burstTime[i] = 0;
                }
                else {
                    burstTime[i] = burstTime[i] - timeSlice;
                    temp = temp + timeSlice;
                }
            }
        }
    }
    /* Calculate the 'waiting time', 'turn-around-time' and
       'response time' for each process. */
    
    /* Waiting Time */
    for (i = 0; i < numProcesses; i++) {
        waitTime[i] = turnAroundTime[i] - backupBurstTime[i];
    }

    /* Response Time */
    for (i = 0; i < numProcesses; i++) {
        if (backupBurstTime[i] >= timeSlice) {
            responseTime[i] = i * timeSlice;
        } else {
            responseTime[i] = (i == 0) ? 0 : responseTime[i-1] + backupBurstTime[i];
        }
    }

    printf("\n\t PROCESS\t BURST TIME\t WAITING TIME\t TURNAROUND TIME\t RESPONSE TIME\n");
    for (i = 0; i < numProcesses; i++) {
        printf("\t P%d \t\t %d \t\t %d \t\t %d \t\t\t %d \n", i + 1, backupBurstTime[i], waitTime[i], turnAroundTime[i], responseTime[i]);
    }

    /*Calculate and print the ‘average waiting time’,
    ‘average turn-around-time’, and 'average response time' */

    for (i = 0; i < numProcesses; i++) {
        avgWaitTime += waitTime[i];
        avgTurnAroundTime += turnAroundTime[i];
        avgResponseTime += responseTime[i];
    }

    printf("\n\t The Average Waiting time: %.2f\n", avgWaitTime / numProcesses);
    printf("\n\t The Average Turnaround time: %.2f\n", avgTurnAroundTime / numProcesses);
    printf("\n\t The Average Response time: %.2f\n", avgResponseTime / numProcesses);

}

